{"version":3,"sources":["Output.js","App.js","index.js"],"names":["Output","props","useState","name","nameInitial","setName","useEffect","className","App","href","type","value","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAEe,SAASA,EAAOC,GAC7B,MAAwCC,mBAASD,EAAME,MAAK,mBAApDC,EAAW,KACnB,GADmC,KACTF,mBAASD,EAAME,OAAK,mBAAtCA,EAAI,KAAEE,EAAO,KAMrB,OAJAC,qBAAU,WACRD,EAAQJ,EAAME,QACb,CAACF,EAAME,OAGR,sBAAKI,UAAU,SAAQ,UACrB,+BAAI,WAAQ,+BAAM,iBAClB,8BAAG,uDAAoD,+BAAM,eAAiB,2BAC9E,wDAGA,mBAAGA,UAAU,MAAK,SAAEH,IAEpB,+BAAI,QAAK,+BAAM,iBACf,8BAAG,0CAAuC,+BAAM,cAAgB,uHAChE,wHAQA,mBAAGG,UAAU,MAAK,SAAEJ,OCZXK,MAdf,WACE,MAA0BN,mBAAS,sBAAqB,mBAAhDC,EAAI,KAAEE,EAAO,KAErB,OACE,sBAAKE,UAAU,MAAK,UAClB,+BAAI,oBAAiB,+BAAM,cAAgB,OAC3C,8BAAG,0BAAuB,mBAAGE,KAAK,4CAA2C,SAAC,+BAAM,eAAmB,wGAAqG,mBAAGA,KAAK,6CAA4C,SAAC,+BAAM,gBAAoB,gDAC3R,4BAAG,6CACH,uBAAOC,KAAK,OAAOH,UAAU,GAAGI,MAAOR,EAAMS,SAAU,SAACC,GAAC,OAAKR,EAAQQ,EAAEC,OAAOH,UAC/E,cAACX,EAAM,CAACG,KAAMA,QCPpBY,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,U","file":"static/js/main.998fb358.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function Output(props) {\n  const [ nameInitial, setNameInitial ] = useState(props.name);\n  const [ name, setName ] = useState(props.name);\n\n  useEffect(() => {\n    setName(props.name);\n  }, [props.name]);\n\n  return (\n    <div className=\"Output\">\n      <h3>Without <code>useEffect</code></h3>\n      <p>The initial value is set, but never updates despite <code>props.name</code> updating on changes.</p>\n      <pre>\n      {`useState(props.name);`}\n      </pre>\n      <p className=\"val\">{nameInitial}</p>\n\n      <h3>With <code>useEffect</code></h3>\n      <p>Now the name value updates because the <code>useEffect</code> function runs on state changes. By calling the setter function, the component re-renders with the updated value.</p>\n      <pre>\n      {\n`useState(props.name);\n\nuseEffect(() => {\n  setName(props.name);\n}, [props.name]);`}\n      </pre>\n      <p className=\"val\">{name}</p>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport Output from './Output.js';\n\nfunction App() {\n  const [ name, setName ] = useState('Welcome to Seattle');\n\n  return (\n    <div className=\"App\">\n      <h2>Why should I use <code>useEffect</code>?</h2>\n      <p>Setting state with the <a href=\"https://reactjs.org/docs/hooks-state.html\"><code>useState</code></a> hook is great. If the value was set with props initially and your props update, you need to use the <a href=\"https://reactjs.org/docs/hooks-effect.html\"><code>useEffect</code></a> function to properly re-render the state.</p>\n      <p>Try editing the text in the field below.</p>\n      <input type=\"text\" className=\"\" value={name} onChange={(e) => setName(e.target.value)}></input>\n      <Output name={name} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}